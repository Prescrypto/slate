---
title: CG API Reference

language_tabs:
  - shell

toc_footers:
  - <a href='https://www.cgblockchain.com/'>More info</a>
  - <a href='https://github.com/tripit/slate'>Documentation Powered by Slate</a>

includes:
  - errors

search: true
---

# Introduction

Welcome to the CG API Documentation! CG’s API platform includes numerous endpoints to help you build your solutions.
To get started, you will first need to change the base url {base_url} on our website at `https://www.cgblockchain.com/` Next, you will need to use the endpoint 'url' i.e. `New Order == "api/v1/neworder"` The final url result should be: `https://www.cgblockchain.com/api/v1/neworder`

In this API Documentation, you will notice that each data subject contains 3 components.  The “subject name” refers to the block name, “scope” is the frequency of which a block is provided for the data subject, and “attributes” are the contents of each data subject. As the CG API is based on an event-driven architecture, each event will be represented by one or more data subjects based on the Lifecyle of an order.


# Order

<%= partial "partials/order_security_sender_description.html" %>

## New order

`POST api/v1/order/`

The attribute NEW_ORDER represents a new order at the inception of the order lifecycle. ORDER_STATUS_ID is the ID assigned to the ORDER_STATUS block.

The `'ORDER_STATUS'` data subject provides the state of the order within the lifecycle; both current and previous.

> To create new Order, use this code:

<%= partial "partials/order_security_sender.html" %>
<%= partial "partials/order_status.html" %>

> Change {base_url} with main domain and {url} with corresponding endpoint url


<aside class="notice">
Just sure to have the correct credentials every endpoint
</aside>

## Order amend
`PUT api/v1/order/{order_id}/amend`

The attribute ORDER_AMEND represents an amendment to an order's attributes.

`Scope` A block will be included for both CURRENT & PREVIOUS state.

> To create amend Order, use this code:

<%= partial "partials/order_security_sender.html" %>
<%= partial "partials/order_status.html" %>

> Change {base_url} with main domain and {url} with corresponding endpoint url


## Order Cancel/Complete
`PUT api/v1/order/{order_id}/cancel`
`PUT api/v1/order/{order_id}/complete`

ORDER_CANCEL represents the cancellation of an order.
ORDER_COMPLETE represents the completion of an order.

`Scope` A block will be included for both CURRENT & PREVIOUS state.

> To create Cancel/Complete Order, use this code:

<%= partial "partials/order_security_sender.html" %>
<%= partial "partials/order_status.html" %>

> Change {base_url} with main domain and {url} with corresponding endpoint url


## Run compliance
`POST api/v1/compliance/`

The `'COMPLIANCE'` data subject provides a repeating status of compliance checks performed during the order lifecycle.
For every rule applied, a type; rule description; status; and plain English result text will be provided.

Attribute | Description
--------- | -------
COMPLIANCE_RUN | It is the iteration of compliance applied to an order.
COMPLIANCE_ID | It is the ID assigned to the COMPLIANCE block.

`Scope` Repeats per compliance rule applied to an order, and provides the result.

> To create compliance, use this code:

<%= partial "partials/order_security_sender.html" %>
<%= partial "partials/compliance.html" %>

> Change {base_url} with main domain and {url} with corresponding endpoint url


## Sent to trade
`POST api/v1/order/{order_id}/sent_to_trade`

SENT_TO_TRADE represents an order passing compliance, and being sent to trade. It is an attribute of the ‘ORDER_STATUS’ block name that provides the state of the order within the lifecycle; both current and previous.

`Scope` A block will be included for both CURRENT & PREVIOUS state.

> To create sent to trade Order, use this code:

<%= partial "partials/order_security_sender.html" %>
<%= partial "partials/order_status.html" %>

> Change {base_url} with main domain and {url} with corresponding endpoint url


## Parent Order Creation
`POST api/v1/order/{order_id}/parent_creation`

PARENT_ORDER_CREATION represents the activation of the order following the 'SENT_TO_TRADE' event. It is also an attribute of the ‘ORDER_STATUS’ block name that provides the state of the order within the lifecycle; both current and previous.

`Scope` A block will be included for both CURRENT & PREVIOUS state.

> To create Parent creation Order, use this code:

<%= partial "partials/order_security_sender.html" %>
<%= partial "partials/order_status.html" %>

> Change {base_url} with main domain and {url} with corresponding endpoint url

# Assign / acquire

`POST api/v1/order/{order_id}/assign`

<%= partial "partials/order_security_sender_description.html" %>

Assign/Acquire is an event that represents a milestone for the lifecycle of an order. It represents 3 data subjects: ORDER_ATTRIBUTE, SECURITY, SENDER.

> To create Assign/acquire Order, use this code:

<%= partial "partials/order_security_sender.html" %>
<%= partial "partials/no_object.html" %>

> Change {base_url} with main domain and {url} with corresponding endpoint url


# Merge / split
## Merge

`POST api/v1/merge/{order_id}`

The `'MERGE'` data subject is generated when two orders are joined in Portware. When this happens, the order details of
the merged order will be included within this block. It will repeat every merge that takes place in Portware.

Scope: A block will repeat to include each block that is merged with the order.

The description for each attribute under the ‘MERGE’ data subject are as follows:

Attribute | Description
--------- | -------
PROGRAM_ID | Program ID of the Portware Basket.
PARENT_ID | Parent ID representing the order.
QUANTITY | Order Quantity submitted on the order.
SIDE | The side of the order (i.e. B/S/SS)
PRICE | The price provided on the order.
ALLOCATION_ACCOUNT | The allocations associated with the incoming order.
ALLOCATION_QUANTITY | The quantity associated with the referenced account.
PRICE_TYPE_QUALIFIER | Held, Not Held
TIF | GTC, Day, GTD
EXPIRY | Expiry of the order.
SETTLEMENT_DATE | Settlement date of the order.
CCY_PAIR | If the event is associated with an FX order, currency pair will be included.
FIXING_DATE | If the event is associated with an FX NDF order, fixing date will be included.
ORDER_TYPE | Stop, Stop Limit, Limit Market
STOP_PRICE | Stop price if the ORDER_TYPE is stop limit.
PAR_VALUE | Included if the order is specific to Fixed Income.
MATURITY_DATE | The Maturity date of a Fixed income or futures contract.
STRIKE_PRICE | The strike price of an options contract.
EXECUTED_VOLUME | The volume executed at the time of an event.
COMMITTED_VOLUME | Any remaining quantity currently allocated to a service / broker at the time of an event.
OWNER | The current owner of the order
MERGE_ID | The ID assigned to the MERGE block

<%= partial "partials/order_security_sender.html" %>
<%= partial "partials/merge.html" %>

## Split
`POST api/v1/split/{order_id}`

The `'SPLIT'` data subject will detail quantity that is split off from the order. It will repeat for each split executed against theorder during the lifecycle.

Scope: A block will repeat to include each quantity split from the order.


Attribute | Description
--------- | -------
SPLIT_QUANTITY | It is the quantity of the order that was split.
SPLIT_ID | It is the ID assigned to the SPLIT block.

<%= partial "partials/order_security_sender.html" %>
<%= partial "partials/split.html" %>

# Sweep
`POST api/v1/sweep/{order_id}`

The `'SWEEP'` data subject details advertisements sent to dark pools associated with the order. This will repeat for each
sweep performed on an order.

Scope: A block will be included for both CURRENT & PREVIOUS state, and it will repeat for each Sweep.

OPEN_QUANTITY is the quantity advertised to a dark pool.
SWEEP_DESITNATION is the dark pool a trader is targeting for the quantity advertised.
SWEEP_ID represents the ID assigned to the SWEEP block.

<%= partial "partials/order_security_sender.html" %>
<%= partial "partials/sweep.html" %>

# Placements

The ‘PLACEMENT’ data subject provides data associated with child orders sent to market to trade. It will detail the
quantity, destination, and other attributes of the placement. It will be repeated to include all associated placements, as
well as the current and previous states.

## New Placement
`POST api/v1/placements/`

`Scope` A block will be included for both CURRENT & PREVIOUS state, and it will
repeat for each placement.

<%= partial "partials/order_security_sender.html" %>
<%= partial "partials/placement.html" %>

## Placement Amend
`POST api/v1/placements/{placement_id}/amend`

`Scope` A block will be included for both CURRENT & PREVIOUS state, and it will
repeat for each placement.

<%= partial "partials/order_security_sender.html" %>
<%= partial "partials/placement.html" %>

## Placement Cancel
`POST api/v1/placements/{placement_id}/cancel`

`Scope` A block will be included for both CURRENT & PREVIOUS state, and it will
repeat for each placement.

<%= partial "partials/order_security_sender.html" %>
<%= partial "partials/placement.html" %>

# Executions

The ‘EXECUTION’ data subject provides fill level details for any placement sent to market. It will repeat for each
execution provided to a placement (which will also accompany the data subject). Both the current and previous state will
be provided.

## Execution
`POST api/v1/executions/`

`Scope` A block will be included for both CURRENT & PREVIOUS state, and it will
repeat for each execution.

<%= partial "partials/order_security_sender.html" %>
<%= partial "partials/execution.html" %>
<%= partial "partials/placement.html" %>

## Execution Amend
`POST api/v1/executions/amend`

`Scope` A block will be included for both CURRENT & PREVIOUS state, and it will
repeat for each execution.

<%= partial "partials/order_security_sender.html" %>
<%= partial "partials/execution.html" %>
<%= partial "partials/placement.html" %>

## Execution cancel
`POST api/v1/executions/cancel`

`Scope` A block will be included for both CURRENT & PREVIOUS state, and it will
repeat for each execution.

<%= partial "partials/order_security_sender.html" %>
<%= partial "partials/execution.html" %>
<%= partial "partials/placement.html" %>


# Post Trade Allocation
`POST api/v1/post_trade_allocation`

The `'PT_ALLOCATION'` data subject provides detail for any post-trade allocation performed on an order. It will detail the
account, quantity, price, and associated fees. This will repeat for each allocation (totaling up to the quantity of an order).
Both the current and previous state will be provided.

'Scope' A block will be included for both CURRENT & PREVIOUS state, and it will repeat for each allocation.

<%= partial "partials/order_security_sender.html" %>
<%= partial "partials/post_trade.html" %>

# Exception
`POST api/v1/exceptions`

The `'ALERT'` data subject will be generated whenever an exception is raised in association with the order. The subject
will be repeated for each exception raised during the order lifecycle.

`Scope` A block will be included for both CURRENT & PREVIOUS state, and it will repeat for each alert.

<%= partial "partials/order_security_sender.html" %>
<%= partial "partials/alert.html" %>


# archive
`POST api/v1/executions/archive`

<%= partial "partials/order_security_sender_description.html" %>

<%= partial "partials/order_security_sender.html" %>
<%= partial "partials/no_object.html" %>


